***** Running JavaScript in HTML *****
We can write and run javascript, React js  code directly in HTML using <script> tag.
<script type="text/javascript" src="PATH_TO_JS_FILE"><script>


FOR JAVASCRIPT : type="text/javascript" , src="index.js"
<body>
  <div id="root"></div>
  <script type="text/javascript">
    const rootElement = document.getElementById("root");
    const element = document.createElement("h1");
    element.textContent = "Hello World!";
    element.classList.add("greeting");
    rootElement.appendChild(element);
  </script>
</body>


FOR REACT JS : type="module" , src="index.js"
<body>
  <div id="root"></div>
 <script type="module">
  const elementProps = { className: "greeting", children: "Hello world!" };
  const elementType = "h1";
  const element = React.createElement(elementType, elementProps);
</script>


React CDN for linking react js in HTML.
<script src="https://unpkg.com/react@17.0.0/umd/react.development.js"></script>
<script src="https://unpkg.com/react-dom@17.0.0/umd/react-dom.development.js"></script>
<script src="https://unpkg.com/@babel/standalone@7.12.4/babel.js"></script>


create Element.
In JAvascript : document.createElement(type)
In react js   : React.createElement(type, props)
type - div, h1, p etc.
props(propertoes): c;assName, onClick, id etc.
<script type="module">
  const elementProps = { className: "greeting", children: "Hello world!" };
  const elementType = "h1";
  const element = React.createElement(elementType, elementProps);
</script>


ReactDom.render() - used to diplay react element just like appendchild in javascript.
syntax: ReactDom.render(reactElement, container);
<body>
  <div id="root"></div>
  <script type="module">
    const elementProps = { className: "greeting", children: "Hello world!" };
    const elementType = "h1";
    const element = React.createElement(elementType, elementProps);
    ReactDOM.render(element, document.getElementById("root"));
  </script>
</body>


***** JSX *****
JSX is html like syntax introduced by js to create elements.
const element = <h1 className="greeting">Hello World</h1>;

The above code is JSX code which looks like JSX syntax which thwn compiles into js code.But JSx is not javascript so it needs code compiler,Babel is one such tool.
Babel is a javascript compiler which compiles jsx to regular javascript. 
<script type="text/babel">
  const elementProps = { className: "greeting", children: "Hello world!" };
  const element = React.createElement("h1", elementProps);
  const element = <h1 className="greeting">Hello World</h1>;
  ReactDOM.render(element, document.getElementById("root"));
</script>

      HTML       JSX
      1)class   className 
      2)for      htmlFor

Embedded Variables in JSX 
<body>
  <div id="root"></div>
  <script type="text/babel">
    const name = "Rahul";
    const className = "greeting";
    const element = <h1 className="greeting">Hello World</h1>;
    const element = <h1 className={className}>Hello {name}!</h1>;
    ReactDOM.render(element, document.getElementById("root"));
  </script>
</body>

Embedded Expressions in jsx 
<body>
  <div id="root"></div>
  <script type="text/babel">
    const name = "Rahul";
    const className = "greeting";
    const element = <h1 className="greeting">Hello World</h1>;
    const element = <h1 className={className}>Hello {name}!</h1>;
    ReactDOM.render(element, document.getElementById("root"));
  </script>
</body> 

-->Nesting JSx elements 
Usually ReactDom.render() method returns only one element in render.So we need to wrap the element in paranthesis when writing multiple elements.
<body>
  <script type="text/babel">
    const element = (
      <div>
        <h1 className="greeting">Hello!</h1>
        <p>Good to see you here.</p>
      </div>
    );
    ReactDOM.render(element, document.getElementById("root"));
  </script>

--> React elemnent:
cont welcome=<h1 className='message'>Hello, Rahul</h1>;
Here welcome is react element.

-->React Component: (function instead of element)
cont Welcome= () => <h1 className='message'>Hello, Rahul</h1>;
Here Welcome is react Component.It always starts with Capital letter otherwise, reacts treats it as HTML element.

<script type="text/babel">
  const Welcome = () => <h1 className="message">Hello, User</h1>;
  ReactDOM.render(<Welcome />, document.getElementById("root"));
</script>
NOTE: This function should always call with self-closing tags i.e, <Welcome/>">


--> We can pass the information to a component using props and access them too.

1)passing props:

const Welcome = () => <h1 className="message">Hello, User</h1>;

ReactDOM.render(
  <Welcome name="Rahul" greeting="Hello" />,
  document.getElementById("root")
);

2)Accessing props:
  
const Welcome = (props) => {
  const { name, greeting } = props;
  return (
    <h1 className="message">
      {greeting}, {name}
    </h1>
  );
};

ReactDOM.render(
  <Welcome name="Rahul" greeting="Hello" />,
  document.getElementById("root")
);

3)component is reusable:

const Welcome = (props) => {
  const { name, greeting } = props;
  return (
    <h1 className="message">
      {greeting}, {name}
    </h1>
  );
};

ReactDOM.render(
  <div>
    <Welcome name="Rahul" greeting="Hello" />
    <Welcome name="Ram" greeting="Hi" />
  </div>,
  document.getElementById("root")
);

4)component is composable:

const Welcome = (props) => {
  const { name, greeting } = props;
  return (
    <h1 className="message">
      {greeting}, {name}
    </h1>
  );
};
const Greetings = () => (
  <div>
    <Welcome name="Rahul" greeting="Hello" />
    <Welcome name="Ram" greeting="Hi" />
  </div>
);

ReactDOM.render(<Greetings />, document.getElementById("root"));

***** Third party Packages *****

--> create-react-app (created by facebook)

when we install this package, all setup is ready for application.

installation command:

npm install -g create-react-app projectname 

when above command runs, react appliaction folder created with projectname.
That folder structure:
1)public    -  HTML file present in this folder and we will keep assets like images, icons, videos <etc
2)src       - all react components and like .js file .css file are present here.
3)node_modules- This directory contains dependencies and sub-dependencies of packages used by the current react app, as specified by package.json.
4)package-lock.json - This file contains the exact dependency tree installed in node_modules. This provides a way to ensure every team member have the same version of dependencies and sub-dependencies.

--> How to start react application?
command: npm start 
You can view the application in the URL http://localhost:3000 in your browser.  

NOTE: All the ES6 Modules should be named with .js extension.     

-->Pre-Configured tools

The create-react-app comes pre-configured with:

Live editing: Allows React components to be live reloaded.
ESLint: Analyzes source code to report programming errors, bugs, and syntax errors.
Prettier: Enforces a consistent style for indentation, spacing, semicolons and quotes, etc.
Babel: Compiles JSX into Regular JavaScript
Webpack: Stitches together a group of modules into a single file (or group of files). This process is called Bundling.